import torch
def LinearTet_StVK_W(x, X, lame, mu, m_restScale=1, eps=1e-12):
    t1 = 0.1e1 / m_restScale
    t2 = X[0, 1] * X[2, 2]
    t3 = X[0, 1] * X[3, 2]
    t4 = X[0, 2] * X[2, 1]
    t5 = X[0, 2] * X[3, 1]
    t9 = t1 * (X[2, 1] * X[3, 2] - X[2, 2] * X[3, 1] + t2 - t3 - t4 + t5)
    t10 = X[0, 0] * X[1, 1]
    t13 = X[0, 0] * X[1, 2]
    t16 = X[0, 0] * X[2, 1]
    t18 = X[0, 0] * X[2, 2]
    t20 = X[0, 1] * X[1, 0]
    t23 = X[0, 1] * X[1, 2]
    t26 = X[0, 1] * X[2, 0]
    t29 = t10 * X[2, 2] - t10 * X[3, 2] - t13 * X[2, 1] + t13 * X[3, 1] + t16 * X[3, 2] - t18 * X[3, 1] + t2 * X[3, 0] - t20 * X[2, 2] + t20 * X[3, 2] + t23 * X[2, 0] - t23 * X[3, 0] - t26 * X[3, 2]
    t30 = X[0, 2] * X[1, 0]
    t33 = X[0, 2] * X[1, 1]
    t36 = X[0, 2] * X[2, 0]
    t39 = X[1, 0] * X[2, 1]
    t41 = X[1, 0] * X[2, 2]
    t43 = X[1, 1] * X[2, 0]
    t45 = X[1, 1] * X[2, 2]
    t47 = X[1, 2] * X[2, 0]
    t49 = X[1, 2] * X[2, 1]
    t51 = t30 * X[2, 1] - t30 * X[3, 1] - t33 * X[2, 0] + t33 * X[3, 0] + t36 * X[3, 1] - t39 * X[3, 2] - t4 * X[3, 0] + t41 * X[3, 1] + t43 * X[3, 2] - t45 * X[3, 0] - t47 * X[3, 1] + t49 * X[3, 0]
    t53 = 0.1e1 / (t29 + t51)
    t54 = x[1, 0] - x[0, 0]
    t55 = t53 * t54
    t60 = t1 * (X[1, 1] * X[3, 2] - X[1, 2] * X[3, 1] + t23 - t3 - t33 + t5)
    t61 = x[2, 0] - x[0, 0]
    t62 = t61 * t53
    t65 = t1 * (t23 - t2 - t33 + t4 + t45 - t49)
    t66 = x[3, 0] - x[0, 0]
    t67 = t53 * t66
    t69 = -t9 * t55 + t60 * t62 - t65 * t67
    t70 = t69 ** 2
    t72 = X[0, 0] * X[3, 2]
    t73 = X[0, 2] * X[3, 0]
    t77 = t1 * (X[2, 0] * X[3, 2] - X[2, 2] * X[3, 0] + t18 - t36 - t72 + t73)
    t82 = t1 * (X[1, 0] * X[3, 2] - X[1, 2] * X[3, 0] + t13 - t30 - t72 + t73)
    t85 = t1 * (t13 - t18 - t30 + t36 + t41 - t47)
    t87 = t77 * t55 - t82 * t62 + t85 * t67
    t88 = t87 ** 2
    t90 = X[0, 0] * X[3, 1]
    t91 = X[0, 1] * X[3, 0]
    t95 = t1 * (X[2, 0] * X[3, 1] - X[2, 1] * X[3, 0] + t16 - t26 - t90 + t91)
    t100 = t1 * (X[1, 0] * X[3, 1] - X[1, 1] * X[3, 0] + t10 - t20 - t90 + t91)
    t103 = t1 * (t10 - t16 - t20 + t26 + t39 - t43)
    t105 = t100 * t62 - t103 * t67 - t95 * t55
    t106 = t105 ** 2
    t109 = (0.5e0 * t70 + 0.5e0 * t88 + 0.5e0 * t106 - 0.5e0) ** 2
    t110 = x[1, 1] - x[0, 1]
    t111 = t110 * t53
    t113 = x[2, 1] - x[0, 1]
    t114 = t53 * t113
    t116 = x[3, 1] - x[0, 1]
    t117 = t53 * t116
    t119 = -t9 * t111 + t60 * t114 - t65 * t117
    t125 = t77 * t111 - t82 * t114 + t85 * t117
    t131 = t100 * t114 - t103 * t117 - t95 * t111
    t135 = (0.5e0 * t69 * t119 + 0.5e0 * t87 * t125 + 0.5e0 * t105 * t131) ** 2
    t137 = x[1, 2] - x[0, 2]
    t138 = t53 * t137
    t140 = x[2, 2] - x[0, 2]
    t141 = t53 * t140
    t143 = x[3, 2] - x[0, 2]
    t144 = t53 * t143
    t146 = -t9 * t138 + t60 * t141 - t65 * t144
    t152 = t77 * t138 - t82 * t141 + t85 * t144
    t158 = t100 * t141 - t103 * t144 - t95 * t138
    t162 = (0.5e0 * t69 * t146 + 0.5e0 * t87 * t152 + 0.5e0 * t105 * t158) ** 2
    t164 = t119 ** 2
    t166 = t125 ** 2
    t168 = t131 ** 2
    t171 = (0.5e0 * t164 + 0.5e0 * t166 + 0.5e0 * t168 - 0.5e0) ** 2
    t179 = (0.5e0 * t119 * t146 + 0.5e0 * t125 * t152 + 0.5e0 * t131 * t158) ** 2
    t181 = t146 ** 2
    t183 = t152 ** 2
    t185 = t158 ** 2
    t188 = (0.5e0 * t181 + 0.5e0 * t183 + 0.5e0 * t185 - 0.5e0) ** 2
    t191 = m_restScale * X[0, 0]
    t194 = m_restScale * X[0, 1]
    t196 = m_restScale * X[2, 1] - t194
    t197 = m_restScale * X[0, 2]
    t199 = m_restScale * X[1, 2] - t197
    t202 = m_restScale * X[2, 2] - t197
    t204 = m_restScale * X[1, 1] - t194
    t208 = 0.1666666667e0 * (m_restScale * X[3, 0] - t191) * (t196 * t199 - t202 * t204)
    t212 = m_restScale * X[2, 0] - t191
    t215 = m_restScale * X[1, 0] - t191
    t219 = 0.1666666667e0 * (m_restScale * X[3, 1] - t194) * (-t212 * t199 + t202 * t215)
    t226 = 0.1666666667e0 * (m_restScale * X[3, 2] - t197) * (-t196 * t215 + t212 * t204)
    t227 = -t208 - t219 - t226
    t245 = (-0.1666666667e0 * t66 * (-t140 * t110 + t113 * t137) - 0.1666666667e0 * t116 * (-t61 * t137 + t140 * t54) - 0.1666666667e0 * t143 * (t61 * t110 - t113 * t54) + t208 + t219 + t226) ** 2
    return mu * (t109 + 2 * t135 + 2 * t162 + t171 + 2 * t179 + t188) * t227 + lame * t245 / t227
