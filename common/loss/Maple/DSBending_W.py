import torch
from torch import sqrt, atan2, clamp
def DSBending_W(x, X, k_bend, eps=1e-10):
    t1 = X[1, 1] - X[2, 1]
    t2 = X[0, 2] - X[2, 2]
    t4 = X[1, 2] - X[2, 2]
    t5 = X[0, 1] - X[2, 1]
    t7 = t1 * t2 - t4 * t5
    t8 = t7 ** 2
    t9 = X[1, 0] - X[2, 0]
    t11 = X[0, 0] - X[2, 0]
    t13 = t4 * t11 - t9 * t2
    t14 = t13 ** 2
    t17 = -t1 * t11 + t9 * t5
    t18 = t17 ** 2
    t20 = sqrt(t8 + t14 + t18)
    t22 = X[0, 1] - X[3, 1]
    t23 = X[1, 2] - X[3, 2]
    t25 = X[0, 2] - X[3, 2]
    t26 = X[1, 1] - X[3, 1]
    t28 = t22 * t23 - t25 * t26
    t29 = t28 ** 2
    t30 = X[0, 0] - X[3, 0]
    t32 = X[1, 0] - X[3, 0]
    t34 = -t30 * t23 + t25 * t32
    t35 = t34 ** 2
    t38 = -t22 * t32 + t30 * t26
    t39 = t38 ** 2
    t41 = sqrt(t29 + t35 + t39)
    t46 = x[1, 1] - x[2, 1]
    t47 = x[0, 2] - x[2, 2]
    t49 = x[1, 2] - x[2, 2]
    t50 = x[0, 1] - x[2, 1]
    t52 = t46 * t47 - t49 * t50
    t53 = t52 ** 2
    t54 = x[1, 0] - x[2, 0]
    t56 = x[0, 0] - x[2, 0]
    t58 = -t54 * t47 + t49 * t56
    t59 = t58 ** 2
    t62 = -t46 * t56 + t54 * t50
    t63 = t62 ** 2
    t65 = sqrt(t53 + t59 + t63)
    t66 = 0.1e1 / clamp(t65, min=eps)
    t67 = t66 * t58
    t68 = x[0, 1] - x[3, 1]
    t69 = x[1, 2] - x[3, 2]
    t71 = x[0, 2] - x[3, 2]
    t72 = x[1, 1] - x[3, 1]
    t74 = t68 * t69 - t71 * t72
    t75 = t74 ** 2
    t76 = x[0, 0] - x[3, 0]
    t78 = x[1, 0] - x[3, 0]
    t80 = -t76 * t69 + t71 * t78
    t81 = t80 ** 2
    t84 = -t68 * t78 + t76 * t72
    t85 = t84 ** 2
    t87 = sqrt(t75 + t81 + t85)
    t88 = 0.1e1 / clamp(t87, min=eps)
    t89 = t88 * t84
    t92 = t66 * t62
    t93 = t88 * t80
    t97 = x[1, 0] - x[0, 0]
    t98 = t97 ** 2
    t99 = x[1, 1] - x[0, 1]
    t100 = t99 ** 2
    t101 = x[1, 2] - x[0, 2]
    t102 = t101 ** 2
    t104 = sqrt(t98 + t100 + t102)
    t105 = 0.1e1 / clamp(t104, min=eps)
    t109 = t66 * t52
    t112 = t88 * t74
    sin137 = (0.10e1 * (0.100e1 * t67 * t89 - 0.100e1 * t92 * t93) * t105 * t97 + 0.10e1 * (-0.100e1 * t109 * t89 + 0.100e1 * t92 * t112) * t105 * t99 + 0.10e1 * (0.100e1 * t109 * t93 - 0.100e1 * t67 * t112) * t105 * t101)
    cos137 = (0.100e1 * t109 * t112 + 0.100e1 * t67 * t93 + 0.100e1 * t92 * t89)
    t137 = 0.5 * atan2(sin137, cos137)
    t138 = 0.1e1 / clamp(t20, min=eps)
    t139 = t138 * t13
    t140 = 0.1e1 / clamp(t41, min=eps)
    t141 = t140 * t38
    t144 = t138 * t17
    t145 = t140 * t34
    t149 = X[1, 0] - X[0, 0]
    t150 = t149 ** 2
    t151 = X[1, 1] - X[0, 1]
    t152 = t151 ** 2
    t153 = X[1, 2] - X[0, 2]
    t154 = t153 ** 2
    t155 = t150 + t152 + t154
    t156 = sqrt(t155)
    t157 = 0.1e1 / clamp(t156, min=eps)
    t161 = t138 * t7
    t164 = t140 * t28
    sin189 = (0.10e1 * (0.100e1 * t139 * t141 - 0.100e1 * t144 * t145) * t157 * t149 + 0.10e1 * (-0.100e1 * t161 * t141 + 0.100e1 * t144 * t164) * t157 * t151 + 0.10e1 * (0.100e1 * t161 * t145 - 0.100e1 * t139 * t164) * t157 * t153)
    cos189 = (0.100e1 * t161 * t164 + 0.100e1 * t139 * t145 + 0.100e1 * t144 * t141)
    t189 = 0.5 * atan2(sin189, cos189)
    return 0.120e2 * k_bend / clamp((0.5e0 * t20 + 0.5e0 * t41), min=eps) * (t137 - t189) ** 2 * t155
